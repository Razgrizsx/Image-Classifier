# -*- coding: utf-8 -*-
"""ImageClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ph4wXhqLNex0lE1lpveosQ8SjF91N--A
"""

import tensorflow as tf
import os
import cv2
import imghdr
from matplotlib import pyplot as plt
import numpy as np

data_dir = 'data'
image_exts = ['jpeg', 'jpg', 'bmp', 'png']

#os.listdir(os.path.join(data_dir, 'cats')) #all the cats images
os.listdir(data_dir)
for image_class in os.listdir(data_dir):
  for image in os.listdir(os.path.join(data_dir, image_class)):
    image_path = os.path.join(data_dir, image_class, image)
    try:
      img = cv2.imread(image_path)
      tip = imghdr.what(image_path)
      if tip not in image_exts:
        print(f"Image not in list {image_path}")
        os.remove(image_path)
    except Exception as e:
      print(f"Issue with image {image_path}")

data = tf.keras.utils.image_dataset_from_directory('data') #is not a preloaded dataset, is a generator, cant just call, need to make it a numpy iterator

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()

batch[0].shape #images as numpy arrays

batch[1]